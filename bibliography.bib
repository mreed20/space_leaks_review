
@inproceedings{10.1145/2695664.2695693,
  title = {Thunk Recycling for Lazy Functional Languages: {{Operational}} Semantics and Correctness},
  booktitle = {Proceedings of the 30th Annual {{ACM}} Symposium on Applied Computing},
  author = {Takano, Yasunao and Iwasaki, Hideya},
  date = {2015},
  pages = {2079--2086},
  publisher = {{Association for Computing Machinery}},
  location = {{Salamanca, Spain}},
  doi = {10.1145/2695664.2695693},
  isbn = {978-1-4503-3196-8},
  keywords = {bisimulation,haskell,lazy evaluation,optimization,semantics,small-step operational semantics,thunk},
  numpages = {8},
  series = {{{SAC}} ’15}
}

@article{10.1145/3093333.3009874,
  title = {Contract-Based Resource Verification for Higher-Order Functions with Memoization},
  author = {Madhavan, Ravichandhran and Kulal, Sumith and Kuncak, Viktor},
  date = {2017-01},
  journaltitle = {SIGPLAN Not.},
  volume = {52},
  pages = {330--343},
  publisher = {{Association for Computing Machinery}},
  address = {New York, NY, USA},
  issn = {0362-1340},
  doi = {10.1145/3093333.3009874},
  file = {/Users/michaelreed/Zotero/storage/WUMUGRJB/Madhavan et al. - 2017 - Contract-based resource verification for higher-or.pdf},
  issue_date = {January 2017},
  keywords = {complexity,dynamic programming,lazy evaluation},
  number = {1},
  numpages = {14}
}

@inproceedings{bakewell_model_2000,
  title = {A Model for Comparing the Space Usage of Lazy Evaluators},
  booktitle = {Proceedings of the 2nd {{ACM SIGPLAN}} International Conference on {{Principles}} and Practice of Declarative Programming  - {{PPDP}} '00},
  author = {Bakewell, Adam and Runciman, Colin},
  date = {2000},
  pages = {151--162},
  publisher = {{ACM Press}},
  location = {{Montreal, Quebec, Canada}},
  doi = {10.1145/351268.351287},
  eventtitle = {The 2nd {{ACM SIGPLAN}} International Conference},
  file = {/Users/michaelreed/Zotero/storage/2G8BWJID/Bakewell and Runciman - 2000 - A model for comparing the space usage of lazy eval.pdf},
  isbn = {978-1-58113-265-6},
  langid = {english}
}

@article{bond_leak_2009,
  title = {Leak Pruning},
  author = {Bond, Michael D. and McKinley, Kathryn S.},
  date = {2009-02-28},
  journaltitle = {ACM SIGPLAN Notices},
  shortjournal = {SIGPLAN Not.},
  volume = {44},
  pages = {277},
  issn = {03621340},
  doi = {10.1145/1508284.1508277},
  file = {/Users/michaelreed/Zotero/storage/H43HLSHN/Bond and McKinley - 2009 - Leak pruning.pdf},
  langid = {english},
  number = {3}
}

@unpublished{brown_trip_nodate,
  title = {A {{Trip Down Memory Lane}} in {{Haskell}}},
  author = {Brown, N. C. and Sampson, A. T.},
  location = {{University of Kent}},
  url = {http://twistedsquare.com/Haskell-Experience.pdf},
  file = {/Users/michaelreed/Zotero/storage/UB3BBWFZ/Brown and Sampson - A Trip Down Memory Lane in Haskell.pdf}
}

@inproceedings{chakravarty_functional_2001,
  title = {Functional {{Array Fusion}}},
  booktitle = {Proceedings of the {{Sixth ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  author = {Chakravarty, Manuel M. T. and Keller, Gabriele},
  date = {2001},
  pages = {205--216},
  publisher = {{Association for Computing Machinery}},
  location = {{Florence, Italy}},
  doi = {10.1145/507635.507661},
  isbn = {1-58113-415-0},
  series = {{{ICFP}} ’01}
}

@inproceedings{chen_aspect-based_2007,
  title = {Aspect-{{Based Instrumentation}} for {{Locating Memory Leaks}} in {{Java Programs}}},
  booktitle = {31st {{Annual International Computer Software}} and {{Applications Conference}} - {{Vol}}. 2 - ({{COMPSAC}} 2007)},
  author = {Chen, Kung and Chen, Ju-Bing},
  date = {2007-07},
  pages = {23--28},
  publisher = {{IEEE}},
  location = {{Beijing, China}},
  issn = {0730-3157},
  doi = {10.1109/COMPSAC.2007.79},
  eventtitle = {31st {{Annual International Computer Software}} and {{Applications Conference}} - {{Vol}}. 2 - ({{COMPSAC}} 2007)},
  file = {/Users/michaelreed/Zotero/storage/UDK7FIMT/Chen and Chen - 2007 - Aspect-Based Instrumentation for Locating Memory L.pdf},
  isbn = {978-0-7695-2870-0}
}

@inproceedings{chin_towards_1993,
  title = {Towards an Automated Tupling Strategy},
  booktitle = {Proceedings of the 1993 {{ACM SIGPLAN}} Symposium on {{Partial}} Evaluation and Semantics-Based Program Manipulation  - {{PEPM}} '93},
  author = {Chin, Wei-Ngan},
  date = {1993},
  pages = {119--132},
  publisher = {{ACM Press}},
  location = {{Copenhagen, Denmark}},
  doi = {10.1145/154630.154643},
  eventtitle = {The 1993 {{ACM SIGPLAN}} Symposium},
  isbn = {978-0-89791-594-6},
  langid = {english}
}

@inproceedings{gill_short_1993,
  title = {A Short Cut to Deforestation},
  booktitle = {Proceedings of the Conference on {{Functional}} Programming Languages and Computer Architecture  - {{FPCA}} '93},
  author = {Gill, Andrew and Launchbury, John and Peyton Jones, Simon L.},
  date = {1993},
  pages = {223--232},
  publisher = {{ACM Press}},
  location = {{Copenhagen, Denmark}},
  doi = {10.1145/165180.165214},
  eventtitle = {The Conference},
  file = {/Users/michaelreed/Zotero/storage/YRMC85N6/Gill et al. - 1993 - A short cut to deforestation.pdf},
  isbn = {978-0-89791-595-3},
  langid = {english}
}

@inproceedings{gomes_identification_2019,
  title = {Identification and {{Characterization}} of {{Memory Allocation Anomalies}} in {{High}}-{{Performance Computing Applications}}},
  booktitle = {Anais Do {{Simpósio}} Em {{Sistemas Computacionais}} de {{Alto Desempenho}} ({{WSCAD}})},
  author = {Gomes, Antonio Tadeu and Molion, Enzo and Souto, Roberto Pinto and Méhaut, Jean François},
  date = {2019-11-08},
  pages = {1--12},
  publisher = {{Sociedade Brasileira de Computação}},
  doi = {10.5753/wscad.2019.8652},
  abstract = {A memory allocation anomaly occurs when the allocation of a set of heap blocks imposes an unnecessary overhead on the execution of an application. In this paper, we propose a method for identifying, locating, characterizing and fixing allocation anomalies, and a tool for developers to apply the method. We experiment our method and tool with a numerical simulator aimed at approximating the solutions to partial differential equations using a finite element method. We show that taming allocation anomalies in this simulator reduces the memory footprint of its processes by 37.27\% and the execution time by 16.52\%. We conclude that the developer of high-performance computing applications can benefit from the method and tool during the software development cycle.},
  eventtitle = {{{XX Simpósio}} Em {{Sistemas Computacionais}} de {{Alto Desempenho}}},
  file = {/Users/michaelreed/Zotero/storage/NVED6HWN/Gomes et al. - 2019 - Identification and Characterization of Memory Allo.pdf}
}

@inproceedings{gustavsson_possibilities_2001,
  title = {Possibilities and Limitations of Call-by-Need Space Improvement},
  booktitle = {Proceedings of the Sixth {{ACM SIGPLAN}} International Conference on {{Functional}} Programming  - {{ICFP}} '01},
  author = {Gustavsson, Jörgen and Sands, David},
  date = {2001},
  pages = {265},
  publisher = {{ACM Press}},
  location = {{Florence, Italy}},
  doi = {10.1145/507635.507667},
  eventtitle = {The Sixth {{ACM SIGPLAN}} International Conference},
  file = {/Users/michaelreed/Zotero/storage/63X7VAA5/Gustavsson and Sands - 2001 - Possibilities and limitations of call-by-need spac.pdf},
  isbn = {978-1-58113-415-5},
  langid = {english}
}

@online{hambuchen_without_2018,
  title = {Without Performance Tests, We Will Have a Bad Time, Forever},
  author = {Hambüchen, Niklas},
  date = {2018-03-15},
  journaltitle = {FPComplete},
  url = {https://www.fpcomplete.com/blog/without-performance-tests-we-will-have-a-bad-time-forever},
  urldate = {2020-02-28},
  file = {/Users/michaelreed/Zotero/storage/MIZCHQQ8/without-performance-tests-we-will-have-a-bad-time-forever.html}
}

@article{haydarlou_thunk-lifting_nodate,
  title = {Thunk-Lifting: {{Reducing}} Heap Usage in an Implementation of a Lazy Functional Language},
  author = {Haydarlou, A Reza and Hartel, Pieter H},
  pages = {14},
  abstract = {Thunk-lifting is a program transformation for lazy functional programs. The transformation aims at reducing the amount of heap space allocated to the program when it executes. Thunk-lifting transforms a function application that contains as arguments further, nested, function applications into a new function application without nesting. The transformation thus essentially folds some function applications. The applications to be folded are selected on the basis of a set of conditions, which have been chosen such that thunk-lifting never increases the amount of heap space required by a transformed program.},
  file = {/Users/michaelreed/Zotero/storage/N9CTPER4/Haydarlou and Hartel - Thunk-lifting Reducing heap usage in an implement.pdf},
  langid = {english}
}

@article{hofmann_static_2003,
  title = {Static Prediction of Heap Space Usage for First-Order Functional Programs},
  author = {Hofmann, Martin and Jost, Steffen},
  date = {2003-01-15},
  journaltitle = {ACM SIGPLAN Notices},
  shortjournal = {SIGPLAN Not.},
  volume = {38},
  pages = {185--197},
  issn = {03621340},
  doi = {10.1145/640128.604148},
  file = {/Users/michaelreed/Zotero/storage/S6LZY25Y/Hofmann and Jost - 2003 - Static prediction of heap space usage for first-or.pdf},
  langid = {english},
  number = {1}
}

@inproceedings{hudak_history_2007,
  title = {A History of {{Haskell}}: Being Lazy with Class},
  shorttitle = {A History of {{Haskell}}},
  booktitle = {Proceedings of the Third {{ACM SIGPLAN}} Conference on {{History}} of Programming Languages  - {{HOPL III}}},
  author = {Hudak, Paul and Hughes, John and Jones, Simon Peyton and Wadler, Philip},
  date = {2007},
  pages = {12-1-12-55},
  publisher = {{ACM Press}},
  location = {{San Diego, California}},
  doi = {10.1145/1238844.1238856},
  abstract = {This paper describes the history of Haskell, including its genesis and principles, technical contributions, implementations and tools, and applications and impact.},
  eventtitle = {The Third {{ACM SIGPLAN}} Conference},
  file = {/Users/michaelreed/Zotero/storage/ECL4FPL3/Hudak et al. - 2007 - A history of Haskell being lazy with class.pdf},
  langid = {english}
}

@thesis{hughes_design_1983,
  title = {The {{Design}} and {{Implementation}} of {{Programming Languages}}},
  author = {Hughes, R. J. M.},
  date = {1983-07},
  institution = {{Programming Research Group, Oxford University}},
  type = {PhD Thesis}
}

@book{hutton_programming_2016,
  title = {Programming in {{Haskell}}},
  author = {Hutton, Graham},
  date = {2016},
  edition = {2},
  publisher = {{Cambridge University Press}},
  isbn = {978-1-316-62622-1},
  pagetotal = {304}
}

@report{kulal_space_nodate,
  title = {Space Leaks Exploration in {{Haskell}}},
  author = {Kulal, Sumith and Ganvir, Rupanshu and Sudhakaran, Suresh and Sanyal, Amitabha},
  pages = {39},
  institution = {{Indian Institute of Technology, Bombay}},
  url = {https://cs.stanford.edu/~sumith/docs/report-spaceleaks.pdf},
  urldate = {2020-03-10},
  abstract = {A space leak occurs when a computer program uses more memory than necessary. Advanced language features such as lazy evaluation or closures lead to more complex memory layout, making it harder to predict what memory looks like, potentially leading to space leaks. Haskell is vulnerable to space leaks and we make this our topic of study. In this report, we present an extensive literature survey on space leaks in Haskell. We stress on classification of space leaks into different classes and try to reason about them individually. We present a large pool of example space leaks, their complete analysis and fixes. We also touch upon relevant blog posts present on the internet. Corresponding papers that discuss possible fixes have also been presented. Towards the end of this report we present a few ideas for future work that we picked up as we progressed along the survey. This is a first of the kind survey done on space leaks.},
  file = {/Users/michaelreed/Zotero/storage/MNCV3E4M/Kulal et al. - Bachelor of Technology (Honours)(∗) Masters of Tec.pdf},
  langid = {english},
  type = {Seminar Report}
}

@article{latoza_explicit_2020,
  title = {Explicit Programming Strategies},
  author = {LaToza, Thomas D. and Arab, Maryam and Loksa, Dastyni and Ko, Amy J.},
  date = {2020-03-07},
  journaltitle = {Empirical Software Engineering},
  shortjournal = {Empirical Software Engineering},
  issn = {1573-7616},
  doi = {10.1007/s10664-020-09810-1},
  abstract = {Software developers solve a diverse and wide range of problems. While software engineering research often focuses on tools to support this problem solving, the strategies that developers use to solve problems are at least as important. In this paper, we offer a novel approach for enabling developers to follow explicit programming strategies that describe how an expert tackles a common programming problem. We define explicit programming strategies, grounding our definition in prior work both within software engineering and in other professions which have adopted more explicit procedures for problem solving. We then present a novel notation called Roboto and a novel strategy tracker tool that explicitly represent programming strategies and frame executing strategies as a collaborative effort between human abilities to make decisions and computer abilities to structure process and persist information. In a formative evaluation, 28 software developers of varying expertise completed a design task and a debugging task. We found that, compared to developers who are free to choose their own strategies, developers given explicit strategies experienced their work as more organized, systematic, and predictable, but also more constrained. Developers using explicit strategies were objectively more successful at the design and debugging tasks. We discuss the implications of Roboto and these findings, envisioning a thriving ecosystem of explicit strategies that accelerate and improve developers’ programming problem solving.}
}

@book{lipovaca_learn_2011,
  title = {Learn You a {{Haskell}} for Great Good! A Beginner's Guide},
  author = {Lipovača, Miran},
  date = {2011},
  publisher = {{No Starch Press}},
  location = {{San Francisco, Calif}},
  file = {/Users/michaelreed/Zotero/storage/B8AFKI67/Lipovača - 2011 - Learn you a Haskell for great good! a beginner's g.pdf},
  isbn = {978-1-59327-283-8},
  langid = {english},
  note = {OCLC: 729956897},
  pagetotal = {376}
}

@article{liu_plugging_2007,
  title = {Plugging a {{Space Leak}} with an {{Arrow}}},
  author = {Liu, Hai and Hudak, Paul},
  date = {2007-11},
  journaltitle = {Electronic Notes in Theoretical Computer Science},
  shortjournal = {Electronic Notes in Theoretical Computer Science},
  volume = {193},
  pages = {29--45},
  issn = {15710661},
  doi = {10.1016/j.entcs.2007.10.006},
  file = {/Users/michaelreed/Zotero/storage/ARGYW5CS/Liu and Hudak - 2007 - Plugging a Space Leak with an Arrow.pdf},
  langid = {english}
}

@online{marlow_fixing_2018,
  title = {Fixing 17 Space Leaks in {{GHCi}}, and Keeping Them Fixed},
  author = {Marlow, Simon},
  date = {2018-06-20},
  journaltitle = {Simon Marlow},
  url = {https://simonmar.github.io/posts/2018-06-20-Finding-fixing-space-leaks.html},
  urldate = {2020-02-28},
  file = {/Users/michaelreed/Zotero/storage/2RWJBX7T/2018-06-20-Finding-fixing-space-leaks.html},
  type = {Blog}
}

@book{marlow_parallel_2013,
  title = {Parallel and Concurrent Programming in {{Haskell}}: Techniques for Multicore and Multithreaded Programming},
  shorttitle = {Parallel and Concurrent Programming in {{Haskell}}},
  author = {Marlow, Simon},
  date = {2013},
  edition = {1. ed},
  publisher = {{O'Reilly}},
  location = {{Beijing}},
  file = {/Users/michaelreed/Zotero/storage/B23374LB/Marlow - 2013 - Parallel and concurrent programming in Haskell te.pdf},
  isbn = {978-1-4493-3594-6},
  langid = {english},
  note = {OCLC: 851826580},
  pagetotal = {304}
}

@online{mitchell_chasing_2013,
  title = {Chasing a {{Space Leak}} in {{Shake}}},
  author = {Mitchell, Neil},
  date = {2013-02-25},
  journaltitle = {Neil Mitchell's Haskell Blog},
  url = {https://neilmitchell.blogspot.com/2013/02/chasing-space-leak-in-shake.html},
  urldate = {2020-02-28},
  file = {/Users/michaelreed/Zotero/storage/Q7JVPFXI/chasing-space-leak-in-shake.html},
  type = {Blog}
}

@article{mitchell_leaking_2013,
  title = {Leaking {{Space}}},
  author = {Mitchell, Neil},
  date = {2013-09-01},
  journaltitle = {Queue},
  shortjournal = {Queue},
  volume = {11},
  pages = {10--23},
  issn = {15427730},
  doi = {10.1145/2538031.2538488},
  file = {/Users/michaelreed/Zotero/storage/4IRQSMAD/Mitchell - 2013 - Leaking Space.pdf},
  langid = {english},
  number = {9}
}

@online{mitchell_notes_nodate,
  title = {Notes on Space Leaks},
  author = {Mitchell, Neil},
  journaltitle = {GitHub},
  url = {https://github.com/ndmitchell/spaceleak},
  urldate = {2020-02-28},
  file = {/Users/michaelreed/Zotero/storage/IN4SHJDY/spaceleak.html}
}

@thesis{moalla_fresh_2015,
  title = {Fresh {{Techniques}} for {{Memory Proﬁling}} of {{Lazy Functional Programs}}},
  author = {Moalla, Firas Faisal},
  date = {2015-09},
  institution = {{University of York}},
  url = {http://etheses.whiterose.ac.uk/13214/},
  abstract = {Lazy functional languages are known for their semantic elegance. They liberate programmers from many difficult responsibilities, such as the operational details of computations including memory management. However, the productivity and elegant semantics provided by lazy functional languages do not come without a cost. Lazy functional programs often suffer from unpredictable space leaks. For over two decades, various lazy functional implementations have been equipped with memory profiling tools. These tools furnish programmers with valuable informa- tion about space demands, but there is still scope for their future development. This dissertation presents two variants of memory profiling tools. The first tool is a hotspot heap profiler which presents information in two forms: profile charts and highlighted hotspots by source occurrence. The profile chart represents a hotspot- construction profile, distributed by hotspot temperatures. Hotspots are also marked in the textual display of source programs with the temperature they represent. Further information about hotspots is given in individual profiles. The second tool is a stack profiler which yields information about producers and construction of stack frames.},
  file = {/Users/michaelreed/Zotero/storage/YTBLH7MN/Moalla - Fresh Techniques for Memory Proﬁling of Lazy Funct.pdf},
  langid = {english},
  pagetotal = {124},
  type = {MSc by Research, Computer Science}
}

@online{noauthor_63_nodate,
  title = {6.3: {{Optimisation}} (Code Improvement)},
  journaltitle = {Glasgow Haskell Compiler 8.10.1 User's Guide},
  url = {https://downloads.haskell.org/ghc/latest/docs/html/users_guide/using-optimisation.html},
  urldate = {2020-05-13},
  file = {/Users/michaelreed/Zotero/storage/CMF8CUCL/profiling.html},
  type = {Technical Documentation}
}

@online{noauthor_74_nodate-1,
  title = {7.4. {{Profiling}} Memory Usage},
  journaltitle = {Glasgow Haskell Compiler 8.10.1 User's Guide},
  url = {https://downloads.haskell.org/ghc/latest/docs/html/users_guide/profiling.html#profiling-memory-usage},
  urldate = {2020-05-13},
  type = {Technical Documentation}
}

@online{noauthor_75_nodate,
  title = {7.5. Hp2ps – {{Rendering}} Heap Profiles to {{PostScript}}},
  journaltitle = {Glasgow Haskell Compiler 8.10.1 User's Guide},
  url = {https://downloads.haskell.org/ghc/latest/docs/html/users_guide/profiling.html#hp2ps-rendering-heap-profiles-to-postscript},
  urldate = {2020-05-16},
  type = {Technical Documentation}
}

@online{noauthor_754_nodate,
  title = {7.5.4. {{Viewing}} a Heap Profile in Real Time},
  journaltitle = {Glasgow Haskell Compiler 8.10.1 User's Guide},
  url = {https://downloads.haskell.org/ghc/latest/docs/html/users_guide/profiling.html#viewing-a-heap-profile-in-real-time},
  urldate = {2020-05-16},
  file = {/Users/michaelreed/Zotero/storage/D46Z52JQ/profiling.html},
  type = {Technical Documentation}
}

@online{noauthor_controldeepseq_nodate,
  title = {Control.{{DeepSeq}}},
  journaltitle = {Hackage: The Haskell Package Repository},
  url = {http://hackage.haskell.org/package/deepseq-1.4.4.0/docs/Control-DeepSeq.html},
  urldate = {2020-05-15},
  file = {/Users/michaelreed/Zotero/storage/L6RQR5FX/Control-DeepSeq.html},
  type = {Technical Documentation}
}

@online{noauthor_ghcheapview_nodate,
  title = {{{GHC}}.{{HeapView}}},
  url = {https://hackage.haskell.org/package/ghc-heap-view-0.5.3/docs/GHC-HeapView.html},
  urldate = {2020-05-15},
  file = {/Users/michaelreed/Zotero/storage/B8B9G2HN/GHC-HeapView.html}
}

@online{noauthor_heap_nodate,
  title = {Heap {{View}}},
  url = {https://patrickdoc.github.io/heap-view.html},
  urldate = {2020-05-13},
  file = {/Users/michaelreed/Zotero/storage/2XLD3AZU/heap-view.html}
}

@online{noauthor_systemmemweak_nodate,
  title = {System.{{Mem}}.{{Weak}} - {{Weak Pointer}}},
  journaltitle = {Hackage: The Haskell Package Repository},
  url = {https://hackage.haskell.org/package/base-4.8.1.0/docs/System-Mem-Weak.html},
  urldate = {2020-05-13},
  file = {/Users/michaelreed/Zotero/storage/Y89L4AJ8/System-Mem-Weak.html},
  type = {Technical Documentation}
}

@book{peyton_jones_implementation_1987,
  title = {The {{Implementation}} of {{Functional Programming Languages}}},
  author = {Peyton Jones, Simon},
  date = {1987-01},
  publisher = {{Prentice Hall}},
  url = {https://www.microsoft.com/en-us/research/publication/the-implementation-of-functional-programming-languages/},
  abstract = {My 1987 book is now out of print, but it is available here in its entirety in PDF form. Errata Section 5.2.4, p87. We need an extra rule match us [] E = E This accounts for the possibility that in the constructor rule (Section 5.2.4) there may be some non-nullary constructors for which there are no equations. P168, line 2, "VAR" should be "TVAR".}
}

@inproceedings{rojemo_lag_1996,
  title = {Lag, Drag, Void and Use---Heap Profiling and Space-Efficient Compilation Revisited},
  booktitle = {Proceedings of the First {{ACM SIGPLAN}} International Conference on {{Functional}} Programming  - {{ICFP}} '96},
  author = {Röjemo, Niklas and Runciman, Colin},
  date = {1996},
  pages = {34--41},
  publisher = {{ACM Press}},
  location = {{Philadelphia, Pennsylvania, United States}},
  doi = {10.1145/232627.232633},
  eventtitle = {The First {{ACM SIGPLAN}} International Conference},
  file = {/Users/michaelreed/Zotero/storage/6VLMZT6W/Röjemo and Runciman - 1996 - Lag, drag, void and use---heap profiling and space.pdf},
  isbn = {978-0-89791-770-4},
  langid = {english}
}

@online{seniuk_controldeepseqbounded_nodate,
  title = {Control.{{DeepSeq}}.{{Bounded}}},
  author = {Seniuk, Andrew G.},
  journaltitle = {Hackage: The Haskell Package Repository},
  url = {https://hackage.haskell.org/package/deepseq-bounded-0.8.0.0/docs/Control-DeepSeq-Bounded.html},
  urldate = {2020-05-15},
  file = {/Users/michaelreed/Zotero/storage/9TPE9RTT/Control-DeepSeq-Bounded.html},
  type = {Technical Documentation}
}

@online{seniuk_seqaid_nodate,
  title = {Seqaid: {{Dynamic}} Strictness Control, Including Space Leak Repair},
  author = {Seniuk, Andrew G.},
  journaltitle = {Hackage: The Haskell Package Repository},
  url = {https://hackage.haskell.org/package/seqaid},
  urldate = {2020-02-28},
  abstract = {Seqaid is a GHC plugin providing non-invasive auto-instrumentation of Haskell projects, for dynamic strictness (and parallelism) control. This will soon include optimisation for automated space leak relief using minimal strictification. [The optimiser is still in development however.]},
  file = {/Users/michaelreed/Zotero/storage/3429FNCL/seqaid.html},
  type = {Technical Documentation}
}

@online{seniuk_seqaid_nodate-1,
  title = {Seqaid : {{Space}} Leak Diagnostic and Remedial Tool},
  author = {Seniuk, Andrew G.},
  journaltitle = {Seqaid: Space Leak Diagnostic and Remedial Tool},
  url = {https://fremissant.net/seqaid},
  urldate = {2020-05-15},
  file = {/Users/michaelreed/Zotero/storage/28SGN4W2/seqaid.html}
}

@unpublished{sergey_theory_2017,
  title = {Theory and {{Practice}} of {{Demand Analysis}} in {{Haskell}}},
  author = {Sergey, Ilya and Peyton Jones, Simon and Vytiniotis, Dimitrios},
  date = {2017},
  abstract = {This paper presents the fruits of a decade-long experience with strictness analysis, in the context of the Glasgow Haskell Compiler, an optimising compiler for Haskell.},
  file = {/Users/michaelreed/Zotero/storage/KCNKEB5M/Sergey - 2017 - Theory and Practice of Demand Analysis in Haskell.pdf},
  langid = {english}
}

@inproceedings{sparud_fixing_1993,
  title = {Fixing Some Space Leaks without a Garbage Collector},
  booktitle = {Proceedings of the Conference on {{Functional}} Programming Languages and Computer Architecture  - {{FPCA}} '93},
  author = {Sparud, Jan},
  date = {1993},
  pages = {117--122},
  publisher = {{ACM Press}},
  location = {{Copenhagen, Denmark}},
  doi = {10.1145/165180.165196},
  eventtitle = {The Conference},
  file = {/Users/michaelreed/Zotero/storage/ZPLHXUUF/Sparud - 1993 - Fixing some space leaks without a garbage collecto.pdf},
  isbn = {978-0-89791-595-3},
  langid = {english}
}

@online{tibell_results_2011,
  title = {Results from the {{State}} of {{Haskell}}, 2011 {{Survey}}},
  author = {Tibell, J.},
  date = {2011},
  url = {http://blog.johantibell.com/2011/08/},
  urldate = {2020-05-08}
}

@article{wadler_fixing_1987,
  title = {Fixing Some Space Leaks with a Garbage Collector},
  author = {Wadler, Philip},
  date = {1987-09},
  journaltitle = {Software: Practice and Experience},
  shortjournal = {Softw: Pract. Exper.},
  volume = {17},
  pages = {595--608},
  issn = {00380644, 1097024X},
  doi = {10.1002/spe.4380170904},
  file = {/Users/michaelreed/Zotero/storage/IJE3844R/Wadler - 1987 - Fixing some space leaks with a garbage collector.pdf},
  langid = {english},
  number = {9}
}

@online{yang_anatomy_2011,
  title = {Anatomy of a Thunk Leak},
  author = {Yang, Edward Z.},
  date = {2011-05-18},
  journaltitle = {Inside 245-5D},
  url = {http://blog.ezyang.com/2011/05/anatomy-of-a-thunk-leak/},
  urldate = {2020-03-24},
  file = {/Users/michaelreed/Zotero/storage/8NULN3YN/anatomy-of-a-thunk-leak.html},
  type = {Blog}
}

@inproceedings{yang_dynamic_2013,
  title = {Dynamic Space Limits for {{Haskell}}},
  booktitle = {Proceedings of the 35th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}} - {{PLDI}} '14},
  author = {Yang, Edward Z. and Mazières, David},
  date = {2013},
  pages = {588--598},
  publisher = {{ACM Press}},
  location = {{Edinburgh, United Kingdom}},
  doi = {10.1145/2594291.2594341},
  eventtitle = {The 35th {{ACM SIGPLAN Conference}}},
  file = {/Users/michaelreed/Zotero/storage/DRVBU6YU/Yang and Mazières - 2013 - Dynamic space limits for Haskell.pdf},
  isbn = {978-1-4503-2784-8},
  langid = {english}
}

@online{yang_pinpointing_2011,
  title = {Pinpointing Space Leaks in Big Programs},
  author = {Yang, Edward Z.},
  date = {2011-06-10},
  journaltitle = {Inside 245-5D},
  url = {http://blog.ezyang.com/2011/06/pinpointing-space-leaks-in-big-programs/},
  urldate = {2020-02-28},
  file = {/Users/michaelreed/Zotero/storage/4UCB7MBJ/pinpointing-space-leaks-in-big-programs.html},
  type = {Blog}
}

@online{yang_space_2011,
  title = {Space Leak Zoo},
  author = {Yang, Edward Z.},
  date = {2011-05-16},
  journaltitle = {Inside 245-5D},
  url = {http://blog.ezyang.com/2011/05/space-leak-zoo/},
  urldate = {2020-02-28},
  file = {/Users/michaelreed/Zotero/storage/SKTTT4H6/space-leak-zoo.html},
  type = {Blog}
}


